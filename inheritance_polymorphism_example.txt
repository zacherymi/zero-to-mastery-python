# demonstrating object inheritance & polymorphism

# abstracting away the log in class
class User():
    def sign_in(self):
        print('logged in')
# User class is as a parameter to the Wizard class and inherited
class Wizard(User):
    def __init__(self, name, magic_style):
        self.name = name
        self.magic_style = magic_style
    def attack(self):
        print(f'attacking with the power of {self.magic_style}.')

class Rogue(User):
    def __init__(self, name, type_arrow):
        self.name = name
        self.type_arrow = type_arrow

    def attack(self):
        print(f'attacking with {self.type_arrow} arrows.')

wizard1 = Wizard('Romanov', 'frost')
rogue1 = Rogue('Sly Cooper', 'thieving')

wizard1.attack()
rogue1.attack()

print(isinstance(wizard1, Wizard))
# evaluates as true | wizard class is a sub class of the user class
print(isinstance(wizard1, User))
# polymorphism | .attack method can act differently depending on 
# what obj calls them | two different outputs
for char in [wizard1, rogue1]:
    char.attack()